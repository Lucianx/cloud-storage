Javascript Array.prototype.reduce()

var books = [
    {
        title: "Showings",
        author: "Julian of Norwich",
        checkouts: 45
    },
    {
        title: "The Triads",
        author: "Gregory Palamas",
        checkouts: 32
    },
    {
        title: "The Praktikos",
        author: "Evagrius Ponticus",
        checkouts: 29
    }
];
我们通常可能会这样做：

function doSum(arr) {
	var total = 0;
	if(!arr) return total;

	for(var i = 0, ilen = arr.length; i < ilen; i ++) {
		var arri = arr[i];

		total += arri.checkouts;
	}

	return total;
}

//Ouputs: 106
console.log(doSum(books));
如果我们使用reduce方法，我们将会更直接的得出结果：

function doSum(arr) {
	return arr.map(function(item) {
		return item.checkouts;
	})
	.reduce(function(prev, cur) {
		return prev + cur;
	});
}

//Ouputs: 106
console.log(doSum(books));
下面是reduce方法的基本描述：
arr.reduce(callback,[initialValue])，reduce() 方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始缩减，最终为一个值。其中initialValue作为第一次调用 callback 的第一个参数。

reduce 为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，接受四个参数：初始值（或者上一次回调函数的返回值），当前元素值，当前索引，调用 reduce 的数组。

回调函数第一次执行时，previousValue 和 currentValue 可以是一个值，如果 initialValue 在调用 reduce 时被提供，那么第一个 previousValue 等于 initialValue ，并且currentValue 等于数组中的第一个值；如果initialValue 未被提供，那么previousValue 等于数组中的第一个值，currentValue等于数组中的第二个值。详细了解reduce，请戳这里。

var total = [0, 1, 2, 3].reduce(function(a, b, index, arr) {
	console.log(a, b);
	return a + b;
});

//Outputs:
//0 1 
//1 2 
//3 3 
//6 
console.log(total);

var total = [0, 1, 2, 3].reduce(function(a, b, index, arr) {
	console.log(a, b);
	return a + b;
}, 50);

//Outputs:
//50 0 
//50 1 
//51 2 
//53 3 
//56, but not 206
console.log(total);
通过上面两个例子可以看到，如果设置了initValue的值，回调函数会多执行一次。

同时，reduce方法不仅适应于数值型数组，还可以是其他数组，把二维数组转换为json键值对：

var relArray = [
    ["Viola", "Orsino"],
    ["Orsino", "Olivia"],
    ["Olivia", "Cesario"]
];

var relMap = relArray.reduce(function(memo, curr) {
    memo[curr[0]] = curr[1];
    return memo;
}, {});

/*Outputs: 
{
	"Viola": "Orsino",
	"Orsino": "Olivia",
	"Olivia": "Cesario"
}*/

console.log(relMap);
值得注意的是reduce方法在IE低版本（6/7/8）中是不支持的，可以使用如下Polyfill来兼容，或者使用Underscore and Lo-Dash库.

Array.prototype.reduce = Array.prototype.reduce || function(callback, opt_initialValue){
    'use strict';
    if (null === this || 'undefined' === typeof this) {
      // At the moment all modern browsers, that support strict mode, have
      // native implementation of Array.prototype.reduce. For instance, IE8
      // does not support strict mode, so this check is actually useless.
      throw new TypeError(
          'Array.prototype.reduce called on null or undefined');
    }
    if ('function' !== typeof callback) {
      throw new TypeError(callback + ' is not a function');
    }
    var index, value,
        length = this.length >>> 0,
        isValueSet = false;
    if (1 < arguments.length) {
      value = opt_initialValue;
      isValueSet = true;
    }
    for (index = 0; length > index; ++index) {
      if (this.hasOwnProperty(index)) {
        if (isValueSet) {
          value = callback(value, this[index], index, this);
        }
        else {
          value = this[index];
          isValueSet = true;
        }
      }
    }
    if (!isValueSet) {
      throw new TypeError('Reduce of empty array with no initial value');
    }
    return value;
  };
}